<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Uniwersalny Kalkulator Planu Nawo≈ºenia</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Apply Inter font globally */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb; /* gray-50 */
        }
        /* Custom styles for cards, inputs, and layout */
        .config-card, .output-card {
            background-color: white;
            border-radius: 0.75rem; /* rounded-xl */
            padding: 1.5rem; /* p-6 */
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); /* shadow-lg */
            margin-bottom: 1.5rem; /* mb-6 */
        }
         .plantation-block {
            border: 1px solid #e5e7eb; /* gray-200 */
            border-radius: 0.5rem; /* rounded-lg */
            padding: 1rem; /* p-4 */
            margin-bottom: 1rem; /* mb-4 */
            position: relative; /* For remove button positioning */
         }
        label {
            display: block;
            margin-bottom: 0.25rem;
            font-weight: 500; /* font-medium */
            color: #374151; /* gray-700 */
            font-size: 0.875rem; /* text-sm */
        }
        input[type="number"] {
            width: 100%;
            padding: 0.5rem 0.75rem;
            border: 1px solid #d1d5db; /* gray-300 */
            border-radius: 0.375rem; /* rounded-md */
            box-shadow: inset 0 1px 2px 0 rgb(0 0 0 / 0.05);
        }
        .action-button {
            background-color: #10B981; /* emerald-500 */
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.375rem; /* rounded-md */
            font-weight: 600; /* font-semibold */
            transition: background-color 0.2s ease-in-out;
            cursor: pointer;
            border: none;
        }
        .action-button:hover {
            background-color: #059669; /* emerald-600 */
        }
        .remove-button {
             background-color: #f87171; /* red-400 */
             color: white;
             padding: 0.25rem 0.5rem; /* smaller padding */
             border-radius: 0.375rem; /* rounded-md */
             font-size: 0.75rem; /* text-xs */
             font-weight: 500;
             border: none;
             cursor: pointer;
             position: absolute;
             top: 0.5rem; /* p-2 */
             right: 0.5rem; /* p-2 */
             transition: background-color 0.2s ease-in-out;
        }
        .remove-button:hover {
             background-color: #ef4444; /* red-500 */
        }
        /* Updated styles for fertilizer output list items */
        .fertilizer-output-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.75rem 0.5rem;
            border-bottom: 1px solid #f3f4f6;
            transition: background-color 0.15s ease-in-out;
        }
         .fertilizer-output-item:last-child { border-bottom: none; }
        .fertilizer-output-item:hover { background-color: #f8fafc; }
        .fertilizer-name {
            font-weight: 500; color: #374151; display: flex; align-items: center;
        }
        .fertilizer-icon { margin-right: 0.5rem; color: #10B981; font-size: 1.1em; }
        .error-message { color: #EF4444; font-size: 0.875rem; margin-top: 1rem; }
        .calculated-amount {
             font-weight: 600; color: #059669; background-color: #ECFDF5;
             padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-size: 0.9rem;
        }
        .output-placeholder { color: #9ca3af; font-style: italic; padding: 0.75rem 0.5rem; }
    </style>
</head>
<body class="p-4 md:p-8">
    <div class="max-w-7xl mx-auto">

        <h1 class="text-3xl font-bold text-center text-emerald-700 mb-8">Uniwersalny Kalkulator Planu Nawo≈ºenia</h1>

        <div class="grid lg:grid-cols-2 gap-8">
            <div class="config-card">
                <h2 class="text-xl font-semibold text-emerald-600 mb-4 border-b pb-3">Konfiguracja Plantacji i Cel√≥w</h2>

                <div id="plantations-container" class="space-y-4">
                    </div>

                <button id="addPlantationBtn" class="action-button mt-6">
                    + Dodaj Plantacjƒô
                </button>

                 <button id="calculateBtn" class="action-button mt-6 ml-4">
                    Oblicz Plan Nawo≈ºenia dla Wszystkich
                </button>
                <div id="error-message" class="error-message mt-4"></div>
            </div>

            <div class="output-card">
                <h2 class="text-xl font-semibold text-emerald-600 mb-4 border-b pb-3">Obliczony Plan Tygodniowy</h2>
                <div id="results-container" class="space-y-6">
                    <p id="results-placeholder" class="text-gray-500 italic">Wyniki pojawiƒÖ siƒô tutaj po obliczeniu.</p>
                </div>
                 <div class="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
                     <h4 class="font-semibold text-yellow-800">Wa≈ºna Uwaga:</h4>
                     <p class="text-sm text-yellow-700">Wyniki sƒÖ obliczone na podstawie wprowadzonych cel√≥w i predefiniowanej strategii doboru nawoz√≥w. Zawsze weryfikuj plan w oparciu o obserwacje, pomiary EC/pH i warunki pogodowe. Ten kalkulator jest narzƒôdziem pomocniczym. Dodanie miniaturek etykiet produkt√≥w nie jest mo≈ºliwe.</p>
                 </div>
            </div>
        </div>
    </div>

    <script>
        // --- Fertilizer Data ---
        const fertilizers = {
            'YaraTera Calcinit': { N: 15.5, P2O5: 0, K2O: 0, Ca: 19.0, Mg: 0, MgO: 0, S: 0, icon: 'üíß' },
            'MKP': { N: 0, P2O5: 52, K2O: 34, Ca: 0, Mg: 0, MgO: 0, S: 0, icon: 'üå±' },
            'YaraTera Krista MgS': { N: 0, P2O5: 0, K2O: 0, Ca: 0, Mg: 9.6, MgO: 16, S: 13, icon: 'üíé' },
            'Siarczan Potasu': { N: 0, P2O5: 0, K2O: 50, Ca: 0, Mg: 0, MgO: 0, S: 18, icon: '‚ú®' },
            'Siarczan Amonu': { N: 21, P2O5: 0, K2O: 0, Ca: 0, Mg: 0, MgO: 0, S: 24, icon: '‚òÅÔ∏è' },
            'Saletra Amonowa': { N: 34, P2O5: 0, K2O: 0, Ca: 0, Mg: 0, MgO: 0, S: 0, icon: 'üî•' },
            'YaraTera Krista MAG': { N: 11, P2O5: 0, K2O: 0, Ca: 0, Mg: 9.6, MgO: 16, S: 0, icon: 'üí°' },
            'Mocznik': { N: 46, P2O5: 0, K2O: 0, Ca: 0, Mg: 0, MgO: 0, S: 0, icon: 'È°Ü' },
            'MAP': { N: 12, P2O5: 61, K2O: 0, Ca: 0, Mg: 0, MgO: 0, S: 0, icon: 'üåø' }
        };

        // --- DOM Elements ---
        const plantationsContainer = document.getElementById('plantations-container');
        const resultsContainer = document.getElementById('results-container');
        const resultsPlaceholder = document.getElementById('results-placeholder');
        const addPlantationBtn = document.getElementById('addPlantationBtn');
        const calculateBtn = document.getElementById('calculateBtn');
        const errorMessageDiv = document.getElementById('error-message');

        let plantationCounter = 0; // Counter for unique IDs

        // --- Functions ---

        function createPlantationBlock(id, area = 10, sections = 1, targets = { n: 8.0, p: 0.4, k: 1.4, ca: 1.5, mg: 0.15 }) {
            const div = document.createElement('div');
            div.className = 'plantation-block';
            div.setAttribute('data-id', id);
            div.innerHTML = `
                <button class="remove-button" onclick="removePlantation(${id})">Usu≈Ñ</button>
                <h3 class="text-lg font-semibold text-gray-700 mb-4">Plantacja ${id}</h3>
                <div class="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
                     <div>
                        <label for="area_${id}">Powierzchnia (ha)</label>
                        <input type="number" id="area_${id}" name="area_${id}" step="0.1" value="${area}" class="p-2 border rounded" required>
                    </div>
                     <div>
                        <label for="sections_${id}">Liczba Sekcji</label>
                        <input type="number" id="sections_${id}" name="sections_${id}" step="1" value="${sections}" class="p-2 border rounded" required>
                    </div>
                </div>
                <h4 class="text-md font-semibold text-gray-600 mb-2">Cele Tygodniowe (kg/ha)</h4>
                <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div><label for="n_${id}">Cel N</label><input type="number" id="n_${id}" step="0.1" value="${targets.n}" class="p-2 border rounded" required></div>
                    <div><label for="p_${id}">Cel P‚ÇÇO‚ÇÖ</label><input type="number" id="p_${id}" step="0.1" value="${targets.p}" class="p-2 border rounded" required></div>
                    <div><label for="k_${id}">Cel K‚ÇÇO</label><input type="number" id="k_${id}" step="0.1" value="${targets.k}" class="p-2 border rounded" required></div>
                    <div><label for="ca_${id}">Cel Ca</label><input type="number" id="ca_${id}" step="0.1" value="${targets.ca}" class="p-2 border rounded" required></div>
                    <div><label for="mg_${id}">Cel Mg</label><input type="number" id="mg_${id}" step="0.01" value="${targets.mg}" class="p-2 border rounded" required></div>
                </div>`;
            return div;
        }

        function addPlantation() {
            plantationCounter++;
            const defaultTargets = { n: 5.0, p: 0.5, k: 1.5, ca: 1.0, mg: 0.2 };
            const newBlock = createPlantationBlock(plantationCounter, 1, 1, defaultTargets);
            plantationsContainer.appendChild(newBlock);
        }

        function removePlantation(id) {
            const blockToRemove = plantationsContainer.querySelector(`.plantation-block[data-id="${id}"]`);
            if (blockToRemove) blockToRemove.remove();
            const resultToRemove = resultsContainer.querySelector(`.plantation-result-block[data-id="${id}"]`);
            if (resultToRemove) resultToRemove.remove();
            const remainingResults = resultsContainer.querySelectorAll('.plantation-result-block');
            if (remainingResults.length === 0 && resultsPlaceholder) resultsPlaceholder.style.display = 'block';
        }

        function calculateFertilizers(targets, plantationId) {
            console.log(`== Calculating for Plantation ${plantationId} ==`);
            console.log(`Targets received: N=${targets.N}, P2O5=${targets.P2O5}, K2O=${targets.K2O}, Ca=${targets.Ca}, Mg=${targets.Mg}`);
            let neededFertilizers = {};
            let nutrientsSupplied = { N: 0, P2O5: 0, K2O: 0, Ca: 0, Mg: 0, S: 0 };

             if (targets.Ca > 0 && fertilizers['YaraTera Calcinit']?.Ca > 0) {
                const fertName = 'YaraTera Calcinit';
                const fertInfo = fertilizers[fertName];
                const amountHa = targets.Ca / (fertInfo.Ca / 100);
                console.log(`[P${plantationId}] Calcinit amountHa = ${amountHa.toFixed(4)}`);
                neededFertilizers[fertName] = amountHa;
                for (const nut in nutrientsSupplied) { if (fertInfo[nut]) { nutrientsSupplied[nut] += amountHa * (fertInfo[nut] / 100); } }
            }

            let pTargetRemaining = targets.P2O5 - nutrientsSupplied.P2O5;
            if (pTargetRemaining < 0) pTargetRemaining = 0;
            if (pTargetRemaining > 0 && fertilizers['MKP']?.P2O5 > 0) {
                const fertName = 'MKP';
                const fertInfo = fertilizers[fertName];
                const amountHa = pTargetRemaining / (fertInfo.P2O5 / 100);
                neededFertilizers[fertName] = (neededFertilizers[fertName] || 0) + amountHa;
                for (const nut in nutrientsSupplied) { if (fertInfo[nut]) { nutrientsSupplied[nut] += amountHa * (fertInfo[nut] / 100); } }
            }

            let mgTargetRemaining = targets.Mg - nutrientsSupplied.Mg;
             if (mgTargetRemaining < 0) mgTargetRemaining = 0;
             if (mgTargetRemaining > 0 && fertilizers['YaraTera Krista MgS']?.Mg > 0) {
                const fertName = 'YaraTera Krista MgS';
                const fertInfo = fertilizers[fertName];
                const amountHa = mgTargetRemaining / (fertInfo.Mg / 100);
                console.log(`[P${plantationId}] Krista MgS amountHa = ${amountHa.toFixed(4)}`);
                neededFertilizers[fertName] = (neededFertilizers[fertName] || 0) + amountHa;
                for (const nut in nutrientsSupplied) { if (fertInfo[nut]) { nutrientsSupplied[nut] += amountHa * (fertInfo[nut] / 100); } }
            }

            let kTargetRemaining = targets.K2O - nutrientsSupplied.K2O;
            if (kTargetRemaining < 0) kTargetRemaining = 0;
            if (kTargetRemaining > 0 && fertilizers['Siarczan Potasu']?.K2O > 0) {
                const fertName = 'Siarczan Potasu';
                const fertInfo = fertilizers[fertName];
                const amountHa = kTargetRemaining / (fertInfo.K2O / 100);
                neededFertilizers[fertName] = (neededFertilizers[fertName] || 0) + amountHa;
                for (const nut in nutrientsSupplied) { if (fertInfo[nut]) { nutrientsSupplied[nut] += amountHa * (fertInfo[nut] / 100); } }
            }

            let nTargetRemaining = targets.N - nutrientsSupplied.N;
             if (nTargetRemaining < 0) nTargetRemaining = 0;
            if (nTargetRemaining > 0) {
                const fertNameSA = 'Siarczan Amonu';
                const fertInfoSA = fertilizers[fertNameSA];
                const nFromSA_target = Math.min(nTargetRemaining * 0.2, 1.5);
                let amountSA_Ha = 0;
                if (nFromSA_target > 0 && fertInfoSA?.N > 0) {
                     amountSA_Ha = nFromSA_target / (fertInfoSA.N / 100);
                     neededFertilizers[fertNameSA] = (neededFertilizers[fertNameSA] || 0) + amountSA_Ha;
                     for (const nut in nutrientsSupplied) { if (fertInfoSA[nut]) { nutrientsSupplied[nut] += amountSA_Ha * (fertInfoSA[nut] / 100); } }
                     nTargetRemaining -= nFromSA_target;
                     if (nTargetRemaining < 0) nTargetRemaining = 0;
                }
                const fertNameSN = 'Saletra Amonowa';
                const fertInfoSN = fertilizers[fertNameSN];
                if (nTargetRemaining > 0.01 && fertInfoSN?.N > 0) {
                    const amountSN_Ha = nTargetRemaining / (fertInfoSN.N / 100);
                    neededFertilizers[fertNameSN] = (neededFertilizers[fertNameSN] || 0) + amountSN_Ha;
                }
            }
            console.log(`== Finished Calculation for P${plantationId}, Final neededFertilizers (kg/ha):`, JSON.stringify(neededFertilizers));
            return neededFertilizers;
        }

        // Function to display results for one plantation - *** MODIFIED CHECK ***
        function displayResults(plantationId, area, sections, calculatedAmountsHa) {
            const resultBlock = document.createElement('div');
            resultBlock.className = 'plantation-result-block mb-6 border-t pt-4';
            resultBlock.setAttribute('data-id', plantationId);

            const resultsListContainer = document.createElement('div');
            resultsListContainer.className = 'space-y-1';

            const displayOrder = [
                'YaraTera Calcinit', 'MKP', 'YaraTera Krista MgS',
                'Siarczan Potasu', 'Siarczan Amonu', 'Saletra Amonowa'
            ];

            let hasResults = false;
            displayOrder.forEach(fertName => {
                if (!fertilizers[fertName]) {
                    console.warn(`Fertilizer data not found for: ${fertName}`);
                    return;
                }
                const amountHaRaw = calculatedAmountsHa[fertName];
                // *** MORE ROBUST CHECK AND LOGGING ***
                const amountHa = parseFloat(amountHaRaw) || 0; // Ensure number type
                const isNumber = typeof amountHa === 'number' && !isNaN(amountHa);
                const shouldDisplay = isNumber && amountHa > 0.001; // Use a slightly lower threshold just in case, check type

                console.log(`Display Check: P${plantationId}, Fert: ${fertName}, Raw: ${amountHaRaw}, Parsed: ${amountHa.toFixed(4)}, Type: ${typeof amountHa}, IsNumber: ${isNumber}, ShouldDisplay: ${shouldDisplay}`);
                // *** END CHECK ***

                if (shouldDisplay) {
                    hasResults = true;
                    const totalAmount = amountHa * area;
                    const fertInfo = fertilizers[fertName];
                    const icon = fertInfo.icon || 'üß™';

                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'fertilizer-output-item';
                    itemDiv.innerHTML = `
                        <span class="fertilizer-name">
                            <span class="fertilizer-icon">${icon}</span>
                            ${fertName}
                        </span>
                        <span class="calculated-amount">${totalAmount.toFixed(1)} kg</span>
                    `;
                    resultsListContainer.appendChild(itemDiv);
                } else {
                     console.log(`  -> ${fertName} not displayed. Reason: Condition failed (isNumber=${isNumber}, amountHa=${amountHa.toFixed(4)})`);
                }
            });

            if (!hasResults) {
                 const placeholderDiv = document.createElement('div');
                 placeholderDiv.className = 'fertilizer-output-item output-placeholder';
                 placeholderDiv.textContent = 'Brak zapotrzebowania na nawozy przy podanych celach.';
                 resultsListContainer.appendChild(placeholderDiv);
            }

            resultBlock.innerHTML = `
                <h3 class="text-lg font-semibold text-gray-700 mb-3">Plantacja ${plantationId} (${area} ha, ${sections} sekcji) - Wyniki</h3>
                <p class="text-sm text-gray-500 mb-2">Ilo≈õci nawoz√≥w (kg) na ca≈Çy tydzie≈Ñ:</p>
            `;
            resultBlock.appendChild(resultsListContainer);
            resultBlock.innerHTML += `
                <p class="text-sm text-gray-500 mt-4 italic">*Pamiƒôtaj o osobnym zbiorniku dla Calcinit i sprawdzeniu kompatybilno≈õci pozosta≈Çych.</p>
            `;

            return resultBlock;
        }

        // --- Clear Output Logic (Function Definition) ---
        function clearOutput(outputContainer) {
             outputContainer.innerHTML = `
                 <div class="output-placeholder">
                     <span>Oczekiwanie na obliczenia...</span>
                 </div>
             `;
         }

        // --- Event Listeners ---
        addPlantationBtn.addEventListener('click', addPlantation);

        calculateBtn.addEventListener('click', () => {
            console.clear();
            errorMessageDiv.textContent = '';
            resultsContainer.innerHTML = '';
            if(resultsPlaceholder) resultsPlaceholder.style.display = 'none';

            const plantationBlocks = plantationsContainer.querySelectorAll('.plantation-block');
            let calculationError = false;
            let resultsGenerated = false;

            if (plantationBlocks.length === 0) {
                 errorMessageDiv.textContent = 'Dodaj przynajmniej jednƒÖ plantacjƒô.';
                 if(resultsPlaceholder) resultsPlaceholder.style.display = 'block';
                 return;
            }

            plantationBlocks.forEach(block => {
                const id = block.getAttribute('data-id');
                const areaInput = document.getElementById(`area_${id}`);
                const sectionsInput = document.getElementById(`sections_${id}`);
                const targets = {};
                const nutrientInputs = ['n', 'p', 'k', 'ca', 'mg'];
                let validInputs = true;

                const area = parseFloat(areaInput.value);
                const sections = parseInt(sectionsInput.value);

                if (isNaN(area) || area <= 0) {
                    errorMessageDiv.textContent += ` B≈ÇƒÖd: Nieprawid≈Çowa powierzchnia dla Plantacji ${id}.`;
                    validInputs = false;
                    calculationError = true;
                }
                 if (isNaN(sections) || sections <= 0) {
                    errorMessageDiv.textContent += ` B≈ÇƒÖd: Nieprawid≈Çowa liczba sekcji dla Plantacji ${id}.`;
                    validInputs = false;
                    calculationError = true;
                }

                if(validInputs) {
                    nutrientInputs.forEach(nut => {
                        const inputEl = document.getElementById(`${nut}_${id}`);
                        let valueStr = inputEl.value.replace(',', '.'); // Handle comma decimal separator
                        const value = parseFloat(valueStr);
                        function mapNutrientKey(nut) {
    switch (nut.toLowerCase()) {
      case 'n': return 'N';
      case 'p': return 'P2O5';
      case 'k': return 'K2O';
      case 'ca': return 'Ca';
      case 'mg': return 'Mg';
      default: return nut.toUpperCase();
    }
}
const targetKey = mapNutrientKey(nut);

                        if (isNaN(value) || value < 0) {
                            errorMessageDiv.textContent += ` B≈ÇƒÖd: Nieprawid≈Çowa warto≈õƒá dla Cel ${targetKey.replace('2O5', '‚ÇÇO‚ÇÖ')} w Plantacji ${id} (Warto≈õƒá: "${inputEl.value}").`;
                            validInputs = false;
                            calculationError = true;
                        }
                        targets[targetKey] = value;
                    });
                }

                if (validInputs) {
                    try {
                        const calculatedFertilizersHa = calculateFertilizers(targets, id);
                        resultsContainer.appendChild(displayResults(id, area, sections, calculatedFertilizersHa));
                        resultsGenerated = true;
                    } catch (error) {
                         console.error("Error during calculation/display for Plantation", id, error);
                         errorMessageDiv.textContent += ` WystƒÖpi≈Ç b≈ÇƒÖd podczas oblicze≈Ñ dla Plantacji ${id}.`;
                         calculationError = true;
                    }
                } else {
                     const errorBlock = document.createElement('div');
                     errorBlock.className = 'plantation-result-block mb-6 border-t pt-4';
                     errorBlock.setAttribute('data-id', id);
                     errorBlock.innerHTML = `
                         <h3 class="text-lg font-semibold text-red-600 mb-3">Plantacja ${id} - B≈ÇƒÖd Danych</h3>
                         <p class="text-red-500">Nie mo≈ºna obliczyƒá planu z powodu b≈Çƒôdnych danych wej≈õciowych.</p>
                     `;
                     resultsContainer.appendChild(errorBlock);
                }
            });

             if (!resultsGenerated && !calculationError && resultsPlaceholder) {
                 resultsPlaceholder.textContent = 'Brak wynik√≥w do wy≈õwietlenia (sprawd≈∫ cele).';
                 resultsPlaceholder.style.display = 'block';
            } else if (resultsPlaceholder) {
                 resultsPlaceholder.style.display = 'none';
            }
        });

        // --- Initial Setup ---
        window.addEventListener('load', () => {
            plantationCounter++;
            const initialTargets1 = { n: 8.0, p: 0.4, k: 1.4, ca: 1.5, mg: 0.15 };
            plantationsContainer.appendChild(createPlantationBlock(plantationCounter, 10, 6, initialTargets1));

            plantationCounter++;
            const initialTargets2 = { n: 6.8, p: 0.3, k: 1.2, ca: 1.3, mg: 0.10 };
             plantationsContainer.appendChild(createPlantationBlock(plantationCounter, 5.5, 4, initialTargets2));

            if(resultsPlaceholder) {
                resultsPlaceholder.style.display = 'block';
                resultsPlaceholder.textContent = 'Wprowad≈∫ dane i kliknij "Oblicz Plan...", aby zobaczyƒá wyniki.';
            }
        });
    </script>
</body>
</html>
